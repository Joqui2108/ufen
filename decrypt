#!/usr/bin/env node

//Add necesary libraries.
var fs = require('fs'),
	crypto = require('crypto');

//Declare global variables and get input info.
var iv, key, salt, decrypt, tag;
var file = process.argv[2],
	password = process.argv[3],
	outputFile = process.argv[4];

var outFile = fs.createWriteStream(outputFile);

//Read file parts.
var	EOF = fs.statSync(file).size,
	realFile = fs.createReadStream(file, {start: 0, end: EOF-157}),
	authFile = fs.createReadStream(file, {start: EOF-156, end: EOF-141}),
	saltFile = fs.createReadStream(file, {start: EOF-140, end: EOF-13}),
	ivFile = fs.createReadStream(file, {start: EOF-12, end: EOF});

realFile.setMaxListeners(0);

authFile.on('data', function (chunk) {
	tag = new Buffer(chunk, 'hex');
})

//Get used iv to encrypt.
ivFile.on('data', function (chunk) {
	iv = new Buffer(chunk, 'hex');
});

//Get used salt to encrypt.
saltFile.on('data', function (chunk) {
	salt = new Buffer(chunk, 'hex').toString('base64');
});

//Decrypt.
saltFile.on('end', function () {
	key = crypto.pbkdf2Sync(password, salt, 80000, 32, 'SHA512');
	
	ivFile.on('end', function () {
		decrypt = crypto.createDecipheriv('aes-256-gcm', key, iv);
		decrypt.setAuthTag(tag);

		decrypt.on('data', function (chunk) {
			outFile.write(chunk);
		});

		decrypt.on('error', function () {
			console.log('Wrong password.');
			fs.unlinkSync(outputFile)
			process.exit(1);
		})

		realFile.pipe(decrypt);
	});
});